-- Create the Fluent UI if it doesn't exist, otherwise just make the button

-- Parent script references (assuming they are in the same script)
local ValentinesEvent -- Placeholder, will be populated from UI elements or script properties.
local ValentinesEventTeleport -- Placeholder, will be populated from UI elements or script properties.
local TeleportSpeed -- Placeholder, will be populated from UI elements or script properties.

-- Check if the Fluent UI is already loaded (assuming Fluent is a global or a service)
if _G.FluentLoaded then  -- Use a global flag
    -- Fluent UI already exists, just create the floating button.
    Fluent = _G.Fluent -- Use the existing instance
    SaveManager = _G.SaveManager
    InterfaceManager = _G.InterfaceManager
    Window = _G.FluentWindow  -- Assuming you store the window as a global.
    floatingButton = createFloatingButton()
    floatingButton.Visible = true -- Make sure it is visible.

    --Re-establish the connections.
    if Window.Minimized and typeof(Window.Minimized.Connect) == 'function' then
        Window.Minimized:Connect(function()
            floatingButton.Visible = true
        end)
    end
    if Window.Unminimized and typeof(Window.Unminimized.Connect) == 'function' then
        Window.Unminimized:Connect(function()
            floatingButton.Visible = false
        end)
    end


else
    -- Fluent UI doesn't exist, load everything.
    Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
    _G.Fluent = Fluent
    _G.SaveManager = SaveManager
    _G.InterfaceManager = InterfaceManager

    local UIScale = game:GetService("UIScale")
    Window = Fluent:CreateWindow({
        Title = "Fluent " .. Fluent.Version,
        SubTitle = "by dawid",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460),
        Acrylic = true,
        Theme = "Dark",
        MinimizeKey = Enum.KeyCode.LeftControl
    })
    _G.FluentWindow = Window

    --Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
    local Tabs = {
        Main = Window:AddTab({ Title = "Main", Icon = "" }),
        Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
        ValentinesTeleports = Window:AddTab({ Title = "Teleports", Icon = "map" })  -- Added new tab, changed title
    }

    local Options = Fluent.Options

    -- Local Variables
    local LargeTextLabel = game:GetService("Players").LocalPlayer.PlayerGui.HintApp.LargeTextLabel -- Get reference to the Large Label Text
    local teleportSpeed = 1 -- Initial teleport speed (seconds between teleports)
    local stopTeleportFlag = { Value = false }  -- Use a table to hold the flag so it can be modified by reference
    local antiAFKEnabled = false -- Variable to track anti-AFK state

    -- Function to teleport to Cupid
    local function teleportToCupid()
        if not ValentinesEvent or not ValentinesEvent.IsToggled then return end -- Don't teleport if toggle is off

        for i, v in pairs(workspace.StaticMap.Valentines2025.Cupid:GetDescendants()) do
            -- Teleport to Cupid Client
            if v.Name == "CupidClient" then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
                wait(teleportSpeed) -- Use the slider value
            end
            -- Teleport to Cupid Server
            if v.Name == "CupidServer" then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
                wait(teleportSpeed) -- Use the slider value
            end
        end
    end

    -- Function to toggle the teleportation
    local function toggleTeleportation()
        if not ValentinesEvent or not LargeTextLabel then return end
        if ValentinesEvent.IsToggled then
            -- Start the teleportation
            LargeTextLabel.Text = "You Are Currently In a Valentines Event."
        else
            -- Stop the teleportation
            LargeTextLabel.Text = "You Are Not in a Valentines Event."
        end
    end

    -- Function to teleport to Roses and other locations
    local function teleportToLocations(stopFlag)
        local rosePaths = workspace.StaticMap.Valentines2025.Rose_Paths:GetChildren()  -- Get the children of Rose_Paths

        while true do
            if stopFlag and stopFlag.Value then
                break  -- Exit the loop if the stop flag is set
            end

            -- Teleport to Roses and Hearts (as before)
            for i, v in pairs(workspace.StaticMap.Valentines2025.Roses:GetDescendants()) do
                if v.Name == "Collider" then
                    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.HumanoidRootPart then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
                        wait(teleportSpeed) -- Use the slider value
                    else
                        warn("Character or HumanoidRootPart not found.")
                    end
                end
            end

            for i, v in pairs(workspace.StaticMap.Valentines2025.Hearts:GetDescendants()) do
                if v.Name == "Collider" then
                    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.HumanoidRootPart then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
                        wait(teleportSpeed) -- Use the slider value
                    else
                        warn("Character or HumanoidRootPart not found.")
                    end
                end
            end

            -- Teleport to Rose Paths
            for _, roseModel in ipairs(rosePaths) do
                if roseModel:IsA("Model") then  -- Ensure it's a model
                    for _, part in ipairs(roseModel:GetDescendants()) do
                        if part:IsA("BasePart") then -- Check if the object is a BasePart
                            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.HumanoidRootPart then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = part.CFrame
                                wait(teleportSpeed) -- Use the slider value
                            else
                                warn("Character or HumanoidRootPart not found.")
                            end
                        end
                    end
                end
            end

            -- Teleport to Cupid
            teleportToCupid()

            wait(teleportSpeed)
        end
        print("Teleport loop stopped.")
    end

    local ValentinesTeleportToggle = Tabs.ValentinesTeleports:AddToggle("ValentinesTeleportToggle", {
        Title = "Teleport to Valentines Locations",
        Default = false,
        Description = "Teleports to roses, hearts, rose paths, and Cupid in the Valentine's map."
    })

    ValentinesTeleportToggle:OnChanged(function(state)
        if state then
            -- Start teleportation coroutine
            stopTeleportFlag.Value = false
            local teleportCoroutine = task.spawn(teleportToLocations, stopTeleportFlag)
        else
            -- Stop the teleportation coroutine
            stopTeleportFlag.Value = true -- Signal the coroutine to stop
            if teleportCoroutine then
                -- No need to kill the coroutine as the while loop should terminate itself
                teleportCoroutine = nil
            end
        end
    end)

    local TeleportSpeedSlider = Tabs.ValentinesTeleports:AddSlider("TeleportSpeedSlider", {
        Title = "Teleport Speed",
        Description = "Adjust the speed of the teleports (lower value = faster).",
        Default = 1,  -- Start with a speed of 1 second
        Min = 0.1,    -- Minimum speed (0.1 seconds)
        Max = 5,      -- Maximum speed (5 seconds)
        Rounding = 0.1,  -- Adjust the increment/decrement step
        Callback = function(value)
            teleportSpeed = value -- Update the speed variable
            -- If the teleport is running, restart it with the new speed.
            if ValentinesTeleportToggle.State then
                stopTeleportFlag.Value = true -- Signal the coroutine to stop
                task.wait(0.1)
                stopTeleportFlag.Value = false
                ValentinesTeleportToggle:OnChanged(true) -- Restart the teleport
            end
        end
    })

    -- Add the Anti-AFK toggle
    local AntiAFKToggle = Tabs.ValentinesTeleports:AddToggle("AntiAFKToggle", {
        Title = "Anti-AFK",
        Default = false,
        Description = "Keeps your character from being kicked for inactivity."
    })

    AntiAFKToggle:OnChanged(function(state)
        antiAFKEnabled = state
        if antiAFKEnabled then
            -- Start the anti-AFK coroutine
            task.spawn(function()
                while antiAFKEnabled do
                    -- Simulate user input (e.g., jumping)
                    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                        game.Players.LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                    task.wait(15) -- Adjust interval as needed (seconds)
                end
            end)
        end
    end)

    -- Autohide functionality is removed or modified. No autohide toggle

    -- Create a floating button
    local function createFloatingButton()
        local buttonSize = UDim2.new(0, 40, 0, 40) -- Size of the button
        local button = Instance.new("ImageButton") -- Changed to ImageButton
        button.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
        button.Size = buttonSize
        button.Position = UDim2.new(0.5, -20, 0, 50) -- Position in the middle top (adjust offset as needed)
        button.AnchorPoint = Vector2.new(0.5, 0) -- Set the anchor point to the center top
        button.Active = true
        button.Visible = true -- Initially shown
        button.Size = buttonSize
        button.Image = "rbxasset://textures/ui/LuaIcon.png"  -- Example:  Use an icon that represents your UI.
        button.ImageTransparency = 0.2
        button.ImageColor3 = Color3.new(1, 1, 1) -- Set the ImageColor3
        button.BorderSizePixel = 0 --remove border

        local corner = Instance.new("UICorner")  -- Create a UICorner
        corner.CornerRadius = UDim.new(0.5, 0)   -- Set the corner radius
        corner.Parent = button                 -- Parent it to the ImageButton

        -- Handle button click to show the UI
        button.MouseButton1Down:Connect(function()
            if Window:IsVisible() then
                Window:SetVisible(false)
            else
                Window:SetVisible(true)
            end
        end)

        return button
    end

    floatingButton = createFloatingButton()

    -- Listen to the minimized event
    -- Ensure Window.Minimized and Window.Unminimized exist and are valid connections.
    -- Show button on minimize, hide on unminimize
    if Window.Minimized and typeof(Window.Minimized.Connect) == 'function' then
        Window.Minimized:Connect(function()
            floatingButton.Visible = true
        end)
    end
    if Window.Unminimized and typeof(Window.Unminimized.Connect) == 'function' then
        Window.Unminimized:Connect(function()
            floatingButton.Visible = false
        end)
    end

    -- Addons:
    -- SaveManager (Allows you to have a configuration system)
    -- InterfaceManager (Allows you to have a interface managment system)

    -- Hand the library over to our managers
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    SaveManager:IgnoreThemeSettings()

    SaveManager:SetIgnoreIndexes({})

    InterfaceManager:SetFolder("FluentScriptHub")
    SaveManager:SetFolder("FluentScriptHub/specific-game")

    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)

    Window:SelectTab(1)

    -- Add the toggle to toggle Valentines Teleportation
    local ValentinesEventToggle = Tabs.Main:AddToggle("ValentinesEventToggle", {
        Title = "Valentines Event",
        Default = false,
        Description = "Toggles Valentines Event."
    })

    ValentinesEventToggle:OnChanged(function(state)
        if state then
            -- Start teleportation coroutine
            teleportToCupid = function() teleportToCupid() end --Enable it.
            ValentinesEvent = {IsToggled = state} -- Create new reference for events to act on.
            toggleTeleportation()
        else
            -- Stop the teleportation coroutine
            teleportToCupid = function() end --Disable the teleport.
            ValentinesEvent = {IsToggled = state} -- Create new reference for events to act on.
            toggleTeleportation()
        end
    end)

    -- Set the initial state
    ValentinesEvent = {IsToggled = ValentinesEventToggle.State}  --Initial value.
    toggleTeleportation()

    -- Notify the user about the loaded script
    Fluent:Notify({
        Title = "Fluent",
        Content = "The script has been loaded.",
        Duration = 8
    })

    SaveManager:LoadAutoloadConfig()
    _G.FluentLoaded = true
end
